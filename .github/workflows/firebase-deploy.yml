name: Firebase Deploy

on:
  push:
    branches:
      - master
      - testing
jobs:
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'functions/package-lock.json'
      
      - name: Install dependencies
        run: cd functions && npm ci
      
      - name: Debug directory structure
        run: |
          echo "Current directory:"
          pwd
          echo "Contents of current directory:"
          ls -la
          echo "Contents of functions directory:"
          ls -la functions/
          echo "Contents of functions/src directory:"
          ls -la functions/src/
          echo "Contents of functions/package.json:"
          cat functions/package.json

      - name: Build
        run: |
          cd functions
          echo "Running npm run build"
          npm run build
          echo "Build completed"
          echo "Contents of functions directory after build:"
          ls -la
          echo "Contents of lib directory (if exists):"
          if [ -d "lib" ]; then
            ls -la lib/
          else
            echo "lib directory does not exist!"
            mkdir -p lib
          fi
          
          # Copy source files directly if build failed
          if [ ! -f "lib/index.js" ]; then
            echo "lib/index.js not found, copying from src"
            cp -r src/* lib/
            # Rename .ts files to .js
            find lib -name "*.ts" -exec bash -c 'mv "$0" "${0%.ts}.js"' {} \;
            echo "Contents of lib directory after copy:"
            ls -la lib/
          fi
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          # Pass the correct secret JSON directly to the auth action
          credentials_json: ${{ github.ref == 'refs/heads/master' && secrets.FIREBASE_SERVICE_ACCOUNT_LIVE || secrets.FIREBASE_SERVICE_ACCOUNT_TESTING }}

      - name: Deploy to Firebase Functions
        run: |
          # Set project ID based on branch
          # Use standard shell parameter expansion for default value if needed
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            PROJECT_ID="structify-chris-cole"
            echo "Branch is master, deploying to LIVE project: $PROJECT_ID"
          else
            PROJECT_ID="chris-cole-test" # Default or testing project
            echo "Branch is ${{ github.ref }}, deploying to TEST project: $PROJECT_ID"
          fi
          
          # Deploy all functions using Firebase CLI
          # Relies *only* on the ADC context set by google-github-actions/auth
          # and the --project flag. No manual credential handling here.
          echo "Deploying functions to project $PROJECT_ID..."
          firebase deploy --only functions --project $PROJECT_ID --non-interactive --force
      
      - name: Log deployment info
        run: |
          echo "Deployed to project: ${{ github.ref == 'refs/heads/master' && 'structify-chris-cole' || 'chris-cole-test' }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"